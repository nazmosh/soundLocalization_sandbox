function [Feature_1, Feature_2, Feature_3] = Sig_GTCC(y, Fs)
SL = y(:, 1);
SR = y(:, 2);
% Pre-Emphasis
% pre_emphasis = 0.97;
% emphasized_SL = [SL(1); SL(2:end) - pre_emphasis * SL(1:(end-1))];
% emphasized_SR = [SR(1); SR(2:end) - pre_emphasis * SR(1:(end-1))];
emphasized_SL = SL;
emphasized_SR = SR;
% Split the signal into short-time frames in seconds
win_size = 0.005;
win_overlap = 0.001;
% Gammatone Frequency Coeff. for Left Signal
[coeffs_L,~,~,~] = gtcc(emphasized_SL,Fs, ...
                       'NumCoeffs',36, ...
                       'FrequencyRange',[0,Fs/2], ...
                       'Window',hamming(round(win_size*Fs),'periodic'), ...
                       'OverlapLength',round(win_overlap*Fs), ...
                       'LogEnergy','Ignore', ...
                       'FilterDomain','Frequency', ...
                       'Rectification','log');
% Gammatone Frequency Coeff. for Right Signal
[coeffs_R,~,~,~] = gtcc(emphasized_SR,Fs, ...
                       'NumCoeffs',36, ...
                       'FrequencyRange',[0,Fs/2], ...
                       'Window',hamming(round(win_size*Fs),'periodic'), ...
                       'OverlapLength',round(win_overlap*Fs), ...
                       'LogEnergy','Ignore', ...
                       'FilterDomain','Frequency', ...
                       'Rectification','log');
% PhaTGCC Features
max_delay = ceil((1e-3)*Fs);
Sig_len = length(SL);
Start_Idx = Sig_len - max_delay;
End_Idx = Sig_len + max_delay;
[~,R,~] = gccphat(emphasized_SR, emphasized_SL, Fs);
CCF = real(R(Start_Idx:End_Idx));
% Assign Features to the output
Feature_1 = coeffs_L;
Feature_2 = coeffs_R;
Feature_3 = CCF;
end